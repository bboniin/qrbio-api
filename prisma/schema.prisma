generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(uuid())
  name               String
  email              String    @unique
  email_confirmation Boolean   @default(false)
  phone_number       String    @default("")
  password           String
  message            String?   @default("")
  observation        String?   @default("")
  create_at          DateTime? @default(now())
  update_at          DateTime? @default(now())
  profiles           Profile[]

  @@map("users")
}

model PasswordForgot {
  id         String    @id @default(uuid())
  user_email String
  code       String
  create_at  DateTime? @default(now())
  update_at  DateTime? @default(now())

  @@map("passwords_forgot")
}

model Profile {
  id                 String        @id @default(uuid())
  name               String
  nickname           String        @unique
  plan_name          String        @default("free")
  promotional        Boolean       @default(false)
  photo              String?
  description        String?
  create_at          DateTime?     @default(now())
  update_at          DateTime?     @default(now())
  user_id            String
  background         String?
  button_color       String?
  button_style       String?
  font               String?
  font_button_color  String?
  font_color         String?
  category           String?
  background_blur    Float?        @default(0)
  background_image   String?       @default("")
  background_visible Boolean?      @default(true)
  button_opacity     Float?        @default(100)
  redirect           String?
  partner_id         String?       @default("")
  user               User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  links              Link[]
  texts              Text[]
  sociais            Social[]
  tags               Tag[]
  viewsProfiles      ViewProfile[]
  pix                Pix[]
  emergency          Emergency[]

  @@map("profiles")
}

model Tag {
  id         String    @id @default(uuid())
  printed    Boolean   @default(false)
  name       String?
  create_at  DateTime? @default(now())
  update_at  DateTime? @default(now())
  profile_id String?
  profile    Profile?  @relation(fields: [profile_id], references: [id], onDelete: SetNull)
  batch      Batch?    @relation(fields: [batch_id], references: [id])
  batch_id   String?

  @@map("tags")
}

model Link {
  id         String    @id @default(uuid())
  name       String
  order      Int
  url        String
  user_id    String
  icon_name  String?   @default("")
  create_at  DateTime? @default(now())
  update_at  DateTime? @default(now())
  profile_id String
  visible    Boolean   @default(true)
  profile    Profile   @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  @@map("links")
}

model Text {
  id         String    @id @default(uuid())
  name       String
  order      Int
  text       String
  open       Boolean
  user_id    String
  icon_name  String?   @default("")
  alignment  String    @default("center")
  create_at  DateTime? @default(now())
  update_at  DateTime? @default(now())
  profile_id String
  visible    Boolean   @default(true)
  profile    Profile   @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  @@map("texts")
}

model Social {
  id         String    @id @default(uuid())
  name       String
  url        String
  order      Int
  user_id    String
  create_at  DateTime? @default(now())
  update_at  DateTime? @default(now())
  profile_id String
  profile    Profile   @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  @@map("sociais")
}

model ViewProfile {
  id         String    @id @default(uuid())
  profile_id String
  ip         String
  date       String
  month      String
  year       String
  create_at  DateTime? @default(now())
  update_at  DateTime? @default(now())
  profile    Profile   @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  @@map("viewProfiles")
}

model Batch {
  id        String    @id @default(uuid())
  name      String?
  printed   Boolean   @default(false)
  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  partner_id String?
  partner    Partner? @relation(fields: [partner_id], references: [id])

  tags Tag[]

  @@map("batchs")
}

model Partner {
  id        String    @id @default(uuid())
  name      String
  latitude  String?
  longitude String?
  photo     String?
  url       String?   @default("")
  label     String?   @default("")
  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  batchs      Batch[]
  BatchCoupon BatchCoupon[]

  @@map("partners")
}

model Admin {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  @@map("admins")
}

model Pix {
  id              String    @id @default(uuid())
  name            String
  message         String?
  visible_message Boolean   @default(true)
  order           Int
  user_id         String
  create_at       DateTime? @default(now())
  update_at       DateTime? @default(now())
  profile_id      String
  visible         Boolean   @default(true)
  profile         Profile   @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  pixKeys PixKey[]

  @@map("pixs")
}

model PixKey {
  id        String    @id @default(uuid())
  key       String
  name      String
  type      String    @default("")
  order     Int
  visible   Boolean   @default(true)
  create_at DateTime? @default(now())
  update_at DateTime? @default(now())
  pix       Pix       @relation(fields: [pix_id], references: [id], onDelete: Cascade)
  pix_id    String

  @@map("pixKeys")
}

model Emergency {
  id         String    @id @default(uuid())
  name       String    @default("Contato de EmergÃªncia")
  message    String
  order      Int
  user_id    String
  create_at  DateTime? @default(now())
  update_at  DateTime? @default(now())
  profile_id String
  visible    Boolean   @default(true)
  profile    Profile   @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  emergencyContacts EmergencyContact[]

  @@map("emergencies")
}

model EmergencyContact {
  id           String    @id @default(uuid())
  contact      String
  name         String
  kinship      String
  order        Int
  visible      Boolean   @default(true)
  create_at    DateTime? @default(now())
  update_at    DateTime? @default(now())
  emergency    Emergency @relation(fields: [emergency_id], references: [id], onDelete: Cascade)
  emergency_id String

  @@map("emergencyContacts")
}

model Plan {
  id         String    @id @default(uuid())
  profile_id String    @unique
  validity   DateTime
  name       String
  views      Int       @default(0)
  create_at  DateTime? @default(now())
  update_at  DateTime? @default(now())

  @@map("plans")
}

model Purchase {
  id          String    @id @default(uuid())
  profile_id  String
  purchase_id String
  token_id    String
  name        String
  value       Float
  visible     Boolean   @default(true)
  create_at   DateTime? @default(now())
  update_at   DateTime? @default(now())

  @@map("purchases")
}

model BatchCoupon {
  id        String    @id @default(uuid())
  name      String
  plan      String
  printed   Boolean   @default(false)
  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  partner_id String?
  partner    Partner? @relation(fields: [partner_id], references: [id])

  coupons Coupon[]

  @@map("batchsCoupon")
}

model Coupon {
  id        String    @id @default(uuid())
  plan      String
  coupon_id String
  rescued   Boolean   @default(false)
  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  batchsCoupon_id String
  batchsCoupon    BatchCoupon @relation(fields: [batchsCoupon_id], references: [id], onDelete: Cascade)

  @@map("coupons")
}
